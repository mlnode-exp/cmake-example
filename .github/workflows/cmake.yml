
# This is a basic workflow to help you get started with the Run C/C++test action for Make-based project.
name: C/C++test with Make

on:
  # Triggers the workflow on push or pull request events but only for the master (main) branch.
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptest-make:
    name: Analyze project with C/C++test

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Specifies required permissions for upload-sarif action
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Builds your Make project using 'cpptesttrace' to collect input data for code analysis.
    # Be sure 'cpptesttrace' is available on $PATH.
    - name: Build project
      run: cpptesttrace make clean all

    - name: Run Parasoft C/C++test
      # You may pin to the exact commit or the version.
      # uses: parasoft/run-cpptest-action@b8d80cb3a54e92da530d4857477c18b9b55e707b
      uses: parasoft/run-cpptest-action@2.0.1
      with:
        # Installation folder of Parasoft C/C++test. If not specified, the cpptestcli executable must be added to $PATH.
        installDir: /home/mlyko/github/apps/standard/cpptest
        # Working directory for running C/C++test.
        # workingDir: # optional, default is ${{ github.workspace }}
        # Identifier of a compiler configuration. Ensure you specify the configuration that matches your compiler.
        compilerConfig: gcc_9-64
        # Test configuration to be used for code analysis.
        testConfig: builtin://Recommended Rules
        # Output folder for reports from code analysis.
        reportDir: reports2
        # Format of reports from code analysis.
        reportFormat: xml,html,sarif
        # Input scope for analysis (typically, cpptestscan.bdf or compile_commands.json, depending on the project type and the build system).
        # input: # optional, default is cpptestscan.bdf
        # Additional parameters for the cpptestcli executable.
        # additionalParams: # optional, default is 
        # Command line pattern for running C/C++test.
        # commandLinePattern: # optional, default is ${cpptestcli} -compiler "${compilerConfig}" -config "${testConfig}" -property report.format=${reportFormat} -report "${reportDir}" -module . -input "${input}" ${additionalParams}

    # Runs code analysis with C/C++test.
    #- name: Run C/C++test
    #  # Use the 'run-cpptest-action' GitHub action.
    #  uses: parasoft/run-cpptest-action@2.0.1
    #  # Uncomment if you are using C/C++test 2020.2 to generate a SARIF report:
    #  # with:
    #  #   reportFormat: xml,html,custom
    #  #   additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: reports2/report.sarif
    
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: CpptestReports
        path: reports2/*.*
