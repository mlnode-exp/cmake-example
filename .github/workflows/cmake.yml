name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Run Parasoft C/C++test 
        # You may pin to the exact commit or the version.
        # uses: parasoft/run-cpptest-action@aeb0150eeb0f96098ad3bac53609fd462f88c4f6
      uses: parasoft/run-cpptest-action@1.0.1
      with:
        # Installation folder of Parasoft C/C++test. If not specified, the cpptestcli executable must be added to $PATH.
        installDir: "D:\\sesja2022.1\\cpptest" # optional
        # Working directory for running C/C++test.
        # workingDir: # optional, default is ${{ github.workspace }}
        # Identifier of a compiler configuration. Ensure you specify the configuration that matches your compiler.
        # compilerConfig: # optional, default is gcc_9-64
        # Test configuration to be used for code analysis.
        # testConfig: # optional, default is builtin://Recommended Rules
        # Output folder for reports from code analysis.
        # reportDir: # optional, default is reports
        # Format of reports from code analysis.
        # reportFormat: # optional, default is xml,html,sarif
        # Input scope for analysis (typically, cpptestscan.bdf or compile_commands.json, depending on the project type and the build system).
        input: "build\\cpptestscan.bdf" # optional, default is cpptestscan.bdf
        # Additional parameters for the cpptestcli executable.
        # additionalParams: # optional, default is 
        # Command line pattern for running C/C++test.
        # commandLinePattern: # optional, default is ${cpptestcli} -compiler "${compilerConfig}" -config "${testConfig}" -property report.format=${reportFormat} -report "${reportDir}" -module . -input "${input}" ${additionalParams}

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: reports/report.sarif
    
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      uses: actions/upload-artifact@v2
      with:
        name: Static analysis reports
        path: reports/*.*        
